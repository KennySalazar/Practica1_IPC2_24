/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import Reportes.Reporte;
import cargaDeDatos.Estudiante;
import cargaDeDatos.Prestamo;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static persistenciaDatos.PersistenciaDeDatos.estudiantes;
import static persistenciaDatos.PersistenciaDeDatos.prestamos;

/**
 *
 * @author DAVID
 */
public class TablaReporte extends javax.swing.JFrame {

    private Reporte reporte;
    private VentanaPrincipal frame;

    public TablaReporte(Reporte reporte, VentanaPrincipal frame) {
        initComponents();
        this.reporte = reporte;
        this.frame = frame;

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                abrirSegundoJFrame();
            }
        });
    }

    private void abrirSegundoJFrame() {
        frame.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        titulo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tabla Reportes");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        titulo.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 14)); // NOI18N
        titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(titulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void recorrerPrestamos() {
        titulo.setText("Prestamos que deben ser entregados el dia de hoy");
        String titulo[] = {
            "Codigo de Libro", "Carnet", "Fecha"
        };
        String[] columnas = new String[3];
        DefaultTableModel modelo = new DefaultTableModel(null, titulo);
        ArrayList<Prestamo> prestamos = this.reporte.recorrerPrestamos();
        for (Prestamo prestamo : prestamos) {
            columnas[0] = prestamo.getCodigoLibro();
            columnas[1] = prestamo.getCarnetE();
            columnas[2] = prestamo.getFecha();
            modelo.addRow(columnas);

        }
        tabla.setModel(modelo);
    }

    public void mostrarHistorial(int carnet) {
        for (Estudiante estudiante : estudiantes) {
            if (estudiante.getCarnet() == carnet) {
                titulo.setText("Historial del estudiante " + estudiante.getNombre());
                break;
            }
        }

        String titulo[] = {
            "Codigo de Libro", "Carnet", "Fecha"
        };
        String[] columnas = new String[3];
        DefaultTableModel modelo = new DefaultTableModel(null, titulo);
        ArrayList<Prestamo> prestamos = this.reporte.historialEstudiante(carnet);
        for (Prestamo prestamo : prestamos) {
            columnas[0] = prestamo.getCodigoLibro();
            columnas[1] = prestamo.getCarnetE();
            columnas[2] = prestamo.getFecha();
            modelo.addRow(columnas);

        }
        tabla.setModel(modelo);
    }

    public void mostrarActivos(int carnet) {
        for (Estudiante estudiante : estudiantes) {
            if (estudiante.getCarnet() == carnet) {
                titulo.setText("Prestamos Activos del estudiante " + estudiante.getNombre());
                break;
            }
        }

        String titulo[] = {
            "Codigo de Libro", "Carnet", "Fecha"
        };
        String[] columnas = new String[3];
        DefaultTableModel modelo = new DefaultTableModel(null, titulo);
        ArrayList<Prestamo> activos = reporte.prestamosEstudiante(carnet);
        for (Prestamo prestamo : activos) {
            columnas[0] = prestamo.getCodigoLibro();
            columnas[1] = prestamo.getCarnetE();
            columnas[2] = prestamo.getFecha();
            modelo.addRow(columnas);

        }
        tabla.setModel(modelo);
    }

    public void mostrarSegunIntervalo(Date dateUno, Date dateDos) throws ParseException {
        titulo.setText("Prestamos desde " + dateUno + " hasta " + dateDos);
        String titulo[] = {
            "Codigo de Libro", "Carnet", "Fecha"
        };
        String[] columnas = new String[3];
        DefaultTableModel modelo = new DefaultTableModel(null, titulo);
        ArrayList<Prestamo> intervalo = reporte.prestamosEnIntervalo(dateUno, dateDos);
        for (Prestamo prestamo : intervalo) {
            columnas[0] = prestamo.getCodigoLibro();
            columnas[1] = prestamo.getCarnetE();
            columnas[2] = prestamo.getFecha();
            modelo.addRow(columnas);

        }
        tabla.setModel(modelo);
    }

    public void mostrarPrestamos() {
        titulo.setText("Listado de prestamos");
        String titulo[] = {
            "Codigo de Libro", "Carnet", "Fecha"
        };
        String[] columnas = new String[3];
        DefaultTableModel modelo = new DefaultTableModel(null, titulo);
        ArrayList<Prestamo> intervalo = prestamos;
        for (Prestamo prestamo : intervalo) {
            columnas[0] = prestamo.getCodigoLibro();
            columnas[1] = prestamo.getCarnetE();
            columnas[2] = prestamo.getFecha();
            modelo.addRow(columnas);

        }
        tabla.setModel(modelo);
    }

    public void mostrarCarreraI(Date dateUno, Date dateDos, int carrera) throws ParseException {
        switch (carrera) {
            case 1:
                titulo.setText("Listado de prestamos de la carrera de Ingenieria");
                break;
            case 2:
                titulo.setText("Listado de prestamos de la carrera de Medicina");
                break;
            case 3:
                titulo.setText("Listado de prestamos de la carrera de Derecho");
                break;
            case 4:
                titulo.setText("Listado de prestamos de la carrera de Arquitectura");
                break;
            case 5:
                titulo.setText("Listado de prestamos de la carrera de Administracion");
                break;
            default:
                throw new AssertionError();
        }
        String titulo[] = {
            "Codigo de Libro", "Carnet", "Fecha"
        };
        String[] columnas = new String[3];
        DefaultTableModel modelo = new DefaultTableModel(null, titulo);
        ArrayList<Prestamo> intervalo = this.reporte.prestamosEnIntervaloCarrera(dateUno, dateDos);
        if (!intervalo.isEmpty()) {
            for (Prestamo prestamo : intervalo) {
                columnas[0] = prestamo.getCodigoLibro();
                columnas[1] = prestamo.getCarnetE();
                columnas[2] = prestamo.getFecha();
                modelo.addRow(columnas);
                tabla.setModel(modelo);
            }
        } else {
            this.setVisible(false);
            this.frame.setVisible(true);
            JOptionPane.showMessageDialog(null, "No se han realizado prestamos en esas fechas dentro de esa carrera", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
        }

    }
    public void mostrarCarrera(int carrera) throws ParseException {
        switch (carrera) {
            case 1:
                titulo.setText("Listado de prestamos de la carrera de Ingenieria");
                break;
            case 2:
                titulo.setText("Listado de prestamos de la carrera de Medicina");
                break;
            case 3:
                titulo.setText("Listado de prestamos de la carrera de Derecho");
                break;
            case 4:
                titulo.setText("Listado de prestamos de la carrera de Arquitectura");
                break;
            case 5:
                titulo.setText("Listado de prestamos de la carrera de Administracion");
                break;
            default:
                throw new AssertionError();
        }
        String titulo[] = {
            "Codigo de Libro", "Carnet", "Fecha"
        };
        String[] columnas = new String[3];
        DefaultTableModel modelo = new DefaultTableModel(null, titulo);
        this.reporte.clasificarPrestamos(carrera);
        ArrayList<Prestamo> intervalo = this.reporte.mostrarPrestamosCarrera();
        if (!intervalo.isEmpty()) {
            for (Prestamo prestamo : intervalo) {
                columnas[0] = prestamo.getCodigoLibro();
                columnas[1] = prestamo.getCarnetE();
                columnas[2] = prestamo.getFecha();
                modelo.addRow(columnas);
                tabla.setModel(modelo);
            }
        } else {
            this.setVisible(false);
            this.frame.setVisible(true);
            JOptionPane.showMessageDialog(null, "No se han realizado prestamos dentro de esa carrera", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
        }

    }
    
    public void mostrarFondos(){
        String titulo[] = {
            "Codigo de Libro", "Carnet", "Fecha"
        };
        String[] columnas = new String[3];
        DefaultTableModel modelo = new DefaultTableModel(null, titulo);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
